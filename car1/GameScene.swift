//
//  GameScene.swift
//  car1
//
//  Created by rotem israeli on 22/07/2019.
//  Copyright Â© 2019 TandR. All rights reserved.
//

import SpriteKit

class GameScene: SKScene {
  var train = false
  var main_car : car?
  var d_car : draw_car?
  var d_car2 : draw_car?
  var d_car3 : draw_car?
  var d_car4 : draw_car?
  var frames = 0
  var score : Float32 = 0
  var max_score : Float32 = 0
  
  override func didMove(to view: SKView) {
    d_car = draw_car(scene: self)
    d_car2 = draw_car(scene: self)
    d_car3 = draw_car(scene: self)
    d_car4 = draw_car(scene: self)
//    d_car2?.cr.y -= 200
//    d_car3?.cr.y -= 300
//    d_car4?.cr.y -= 100
    d_car2?.cr.brain.random_weights()
    
    d_car3?.cr.brain.random_weights()
    
    d_car4?.cr.brain.random_weights()
    
    print(d_car2?.cr.brain.weights[0][0] == d_car3?.cr.brain.weights[0][0])
    d_car?.cr.reset()
//    d_car?.cr.brain.load_weights(key: "weights")
    d_car?.cr.brain.load_weights(new_weights: [[0.33580342, 0.74148905, 0.23233151, 0.86563444, 0.4777426, 0.09969779, 0.84716916, 0.2796537, 0.8279139, 0.008413091, 0.84823126, 0.3706067, 0.6580029, 0.3077879, 0.78044, 0.013310804, 0.6595711, 0.6645436, 0.8421317, 0.80482984, 0.9276092, 0.2921153, 0.7873874, 0.08570521, 0.5752791, 0.10041133, 0.16469556, 0.7267835, 0.64387584, 0.75310594, 0.035275, 0.8354107, 0.7744583, 0.9313408, 0.7577014, 0.38565913, 0.5485045, 0.73769504, 0.44137067, 0.0071141655, 0.7470371, 0.7570805, 0.34279853, 0.32343093, 0.23676124, 0.84624636, 0.96693367, 0.37884474, 0.18679929, 0.41587245, 0.4298101, 0.6571954, 0.72267425, 0.35445783, 0.80636334, 0.82852036, 0.5104719, 0.017658908, 0.62359434, 0.763245], [0.66192794, 0.957316, 0.33811754, 0.15942125, 0.49198362, 0.51866466, 0.860232, 0.72594374, 0.22870043, 0.7103243, 0.83389014, 0.6614279, 0.6590192, 0.108380884, 0.16131543, 0.8373242, 0.73351085, 0.14264557, 0.9586723, 0.8233375, 0.39293933, 0.22001651, 0.8593726, 0.63742626, 0.8162128, 0.44746274, 0.036702245, 0.83129865, 0.123333864, 0.5467717, 0.017968051, 0.47075003, 0.45159233, 0.11677542, 0.90694386, 0.4893816, 0.6149172, 0.0488275, 0.94677854, 0.3007971, 0.0645972, 0.38101465, 0.9466144, 0.98052716, 0.107174315, 0.5697339, 0.29495174, 0.57252514, 0.7680455, 0.33827204, 0.5024169, 0.44959435, 0.98610795, 0.34591928, 0.1953117, 0.24164328, 0.107732095, 0.71360344, 0.53651434, 0.7349532, 0.7426347, 0.38933104, 0.32748383, 0.7000262, 0.7281711, 0.7757812, 0.76791555, 0.7010464, 0.2036226, 0.45075846, 0.56976986, 0.21812797, 0.056783576, 0.05703365, 0.969826, 0.5315681, 0.4092569, 0.030176105, 0.11761077, 0.6981265], [0.44515905, 0.17072415, 0.36964908, 0.03138783, 0.054368656, 0.69048655, 0.5607337, 0.98563224, 0.20309108, 0.20258589, 0.2907071, 0.45507097, 0.11155297, 0.7523295, 0.43158653, 0.72314596, 0.6144059, 0.8630433, 0.27338248, 0.63082564, 0.110351786, 0.30016315, 0.16442208, 0.7450517, 0.33317465, 0.83131456, 0.9182638, 0.18093185, 0.5594694, 0.31361404, 0.23740046, 0.31178334, 0.5247196, 0.49640346, 0.6050143, 0.45318568, 0.16793546, 0.65312886, 0.50933766, 0.05990383, 0.7378949, 0.6057541, 0.05806156, 0.3726168, 0.8463248, 0.5752524, 0.4082351, 0.40518817], [0.77344275, 0.16925445, 0.45384204, 0.7987157, 0.9505893, 0.43039396, 0.68048245, 0.27740318, 0.7477971, 0.33444008, 0.3942154, 0.13063227, 0.86875165, 0.20473367, 0.8676354, 0.48832774, 0.14252533, 0.84816253]])
    d_car2?.cr.brain.load_weights(new_weights: [[0.1248088, 0.55854106, 0.43077624, 0.42637783, 0.61887956, 0.58832, 0.25760484, 0.401425, 0.4721867, 0.6665579, 0.35868979, 0.6411872, 0.906768, 0.74866956, 0.36807987, 0.041139994, 0.12951879, 0.90891045, 0.98061466, 0.7450081, 0.10867219, 0.77996993, 0.6910899, 0.43305224, 0.5411491, 0.8442014, 0.42072797, 0.06549592, 0.45673853, 0.2651395, 0.015107977, 0.83432657, 0.7320223, 0.1308498, 0.42982304, 0.4936411, 0.36372918, 0.11234498, 0.51426464, 0.18499935, 0.22173658, 0.41081807, 0.27435392, 0.80399996, 0.1633027, 0.65745586, 0.5341196, 0.33723304, 0.5425066, 0.960392, 0.0442768, 0.17023891, 0.9456137, 0.27685317, 0.4020196, 0.37809277, 0.28062126, 0.57728165, 0.076863356, 0.47734103], [0.45713374, 0.10534957, 0.3874395, 0.07346328, 0.8236798, 0.3071021, 0.27666748, 0.5796753, 0.24941656, 0.47839114, 0.098836996, 0.5242017, 0.41483057, 0.77733016, 0.60108507, 0.4832307, 0.13360082, 0.27337718, 0.670932, 0.97034675, 0.690437, 0.10312314, 0.8764546, 0.5406687, 0.5257639, 0.4118465, 0.06995669, 0.30518353, 0.60903645, 0.55692536, 0.4114036, 0.13944913, 0.4528105, 0.40244383, 0.7243042, 0.26818782, 0.56715554, 0.45257568, 0.5821542, 0.03613598, 0.8294001, 0.95399356, 0.4741362, 0.4743512, 0.54148984, 0.9846695, 0.6787588, 0.44409212, 0.11348837, 0.36867273, 0.5258937, 0.40711528, 0.2971511, 0.08521801, 0.8217447, 0.21712193, 0.6013762, 0.63718796, 0.6962866, 0.2531186, 0.05813107, 0.712185, 0.6854037, 0.9882233, 0.43273252, 0.90102696, 0.73522234, 0.98918796, 0.54882556, 0.3682726, 0.096972086, 0.9204628, 0.84187573, 0.22126707, 0.9282647, 0.44548076, 0.98440826, 0.06336441, 0.32020196, 0.80608714], [0.31366947, 0.39908984, 0.4965978, 0.1634132, 0.41303846, 0.3803254, 0.97733504, 0.6103383, 0.08070907, 0.9300622, 0.53610367, 0.7429844, 0.7943339, 0.78139555, 0.11524599, 0.19803913, 0.8330446, 0.042410623, 0.36704305, 0.031333912, 0.33623204, 0.801204, 0.8795314, 0.903869, 0.6025074, 0.16892871, 0.20196271, 0.9428459, 0.9063121, 0.31246942, 0.62457746, 0.8113499, 0.5307774, 0.13282081, 0.9818364, 0.920841, 0.7838426, 0.6217413, 0.05814774, 0.09091585, 0.63364756, 0.7897009, 0.07907696, 0.05187197, 0.62526643, 0.75507605, 0.19579062, 0.5140388], [0.7335141, 0.86112845, 0.3209423, 0.62586695, 0.27852872, 0.9273305, 0.48337224, 0.3082371, 0.44793934, 0.21947688, 0.44798958, 0.4988402, 0.00060094794, 0.8537952, 0.43530068, 0.84689337, 0.4942069, 0.9395958]])
    d_car3?.cr.brain.load_weights(new_weights: [[0.7239753, 0.979306, 0.59154266, 0.34996027, 0.14109668, 0.0261775, 0.65409964, 0.6601479, 0.03523317, 0.48764148, 0.48703223, 0.4967633, 0.32164088, 0.5784029, 0.24792032, 0.19872193, 0.09310533, 0.19772562, 0.5098428, 0.43263495, 0.4013577, 0.67103946, 0.81209254, 0.8778512, 0.91048867, 0.17456135, 0.8024769, 0.48832837, 0.5950306, 0.5028753, 0.64090234, 0.5841527, 0.7278792, 0.44290584, 0.54196715, 0.32350332, 0.7948744, 0.12761451, 0.08461252, 0.98299843, 0.58698636, 0.32097307, 0.5581341, 0.4316396, 0.6640949, 0.73484564, 0.8228015, 0.48758945, 0.21588188, 0.69152284, 0.19484405, 0.7800064, 0.32807097, 0.8565718, 0.80265397, 0.8479656, 0.011971363, 0.39982015, 0.86486125, 0.55859613], [0.49094912, 0.96271014, 0.9007069, 0.34606472, 0.03114169, 0.77361226, 0.06626649, 0.10665578, 0.6306347, 0.3552613, 0.51205873, 0.9432971, 0.6697619, 0.59718555, 0.8520525, 0.9614272, 0.90661, 0.7483842, 0.8228125, 0.3687037, 0.1607834, 0.7397275, 0.87438464, 0.6309331, 0.552704, 0.4304047, 0.47952512, 0.05861614, 0.09600579, 0.037634425, 0.16115093, 0.13112238, 0.82088506, 0.4438224, 0.7336998, 0.062840536, 0.9336461, 0.9610684, 0.724808, 0.5474152, 0.9923419, 0.7906713, 0.90985966, 0.5177363, 0.85366774, 0.05698115, 0.95216084, 0.881665, 0.5785636, 0.2731271, 0.22250408, 0.05316453, 0.38289773, 0.15398808, 0.4785988, 0.22777995, 0.5978267, 0.21304546, 0.550253, 0.5481312, 0.92777914, 0.838887, 0.9114424, 0.88272506, 0.73143935, 0.9591514, 0.7647449, 0.97905225, 0.72467786, 0.7702832, 0.33443767, 0.34435013, 0.23929071, 0.7868921, 0.6073605, 0.71491855, 0.7459812, 0.9816945, 0.99906904, 0.2734679], [0.745698, 0.5235031, 0.9086025, 0.5052421, 0.78479886, 0.44467422, 0.988243, 0.40483105, 0.3942382, 0.9896259, 0.15296972, 0.57951385, 0.2818927, 0.81190526, 0.92402893, 0.08013482, 0.41419876, 0.13885629, 0.0064214347, 0.7310073, 0.45553803, 0.4408814, 0.98352516, 0.5458981, 0.8414741, 0.5978906, 0.4440355, 0.9931118, 0.9483335, 0.5107062, 0.58555216, 0.41005176, 0.99318296, 0.16247521, 0.5422223, 0.5329835, 0.51455104, 0.2877041, 0.115756705, 0.6832909, 0.30797473, 0.68815553, 0.8328636, 0.68514967, 0.23743597, 0.36995265, 0.9688445, 0.64472276], [0.33293954, 0.7298589, 0.35600317, 0.62680805, 0.38793805, 0.046508137, 0.0040402245, 0.3660699, 0.96323144, 0.23063406, 0.19322501, 0.056910586, 0.3146741, 0.744012, 0.23350923, 0.104663946, 0.52195984, 0.537411]])
        d_car4?.cr.brain.load_weights(new_weights: [[0.33580342, 0.74148905, 0.23233151, 0.86563444, 0.4777426, 0.09969779, 0.84716916, 0.2796537, 0.8279139, 0.008413091, 0.84823126, 0.3706067, 0.6580029, 0.3077879, 0.78044, 0.013310804, 0.6595711, 0.6645436, 0.8421317, 0.80482984, 0.9276092, 0.2921153, 0.7873874, 0.08570521, 0.5752791, 0.10041133, 0.16469556, 0.7267835, 0.64387584, 0.75310594, 0.035275, 0.8354107, 0.7744583, 0.9313408, 0.7577014, 0.38565913, 0.5485045, 0.73769504, 0.44137067, 0.0071141655, 0.7470371, 0.7570805, 0.34279853, 0.32343093, 0.23676124, 0.84624636, 0.96693367, 0.37884474, 0.18679929, 0.41587245, 0.4298101, 0.6571954, 0.72267425, 0.35445783, 0.80636334, 0.82852036, 0.5104719, 0.017658908, 0.62359434, 0.763245], [0.66192794, 0.957316, 0.33811754, 0.15942125, 0.49198362, 0.51866466, 0.860232, 0.72594374, 0.22870043, 0.7103243, 0.83389014, 0.6614279, 0.6590192, 0.108380884, 0.16131543, 0.8373242, 0.73351085, 0.14264557, 0.9586723, 0.8233375, 0.39293933, 0.22001651, 0.8593726, 0.63742626, 0.8162128, 0.44746274, 0.036702245, 0.83129865, 0.123333864, 0.5467717, 0.017968051, 0.47075003, 0.45159233, 0.11677542, 0.90694386, 0.4893816, 0.6149172, 0.0488275, 0.94677854, 0.3007971, 0.0645972, 0.38101465, 0.9466144, 0.98052716, 0.107174315, 0.5697339, 0.29495174, 0.57252514, 0.7680455, 0.33827204, 0.5024169, 0.44959435, 0.98610795, 0.34591928, 0.1953117, 0.24164328, 0.107732095, 0.71360344, 0.53651434, 0.7349532, 0.7426347, 0.38933104, 0.32748383, 0.7000262, 0.7281711, 0.7757812, 0.76791555, 0.7010464, 0.2036226, 0.45075846, 0.56976986, 0.21812797, 0.056783576, 0.05703365, 0.969826, 0.5315681, 0.4092569, 0.030176105, 0.11761077, 0.6981265], [0.44515905, 0.17072415, 0.36964908, 0.03138783, 0.054368656, 0.69048655, 0.5607337, 0.98563224, 0.20309108, 0.20258589, 0.2907071, 0.45507097, 0.11155297, 0.7523295, 0.43158653, 0.72314596, 0.6144059, 0.8630433, 0.27338248, 0.63082564, 0.110351786, 0.30016315, 0.16442208, 0.7450517, 0.33317465, 0.83131456, 0.9182638, 0.18093185, 0.5594694, 0.31361404, 0.23740046, 0.31178334, 0.5247196, 0.49640346, 0.6050143, 0.45318568, 0.16793546, 0.65312886, 0.50933766, 0.05990383, 0.7378949, 0.6057541, 0.05806156, 0.3726168, 0.8463248, 0.5752524, 0.4082351, 0.40518817], [0.77344275, 0.16925445, 0.45384204, 0.7987157, 0.9505893, 0.43039396, 0.68048245, 0.27740318, 0.7477971, 0.33444008, 0.3942154, 0.13063227, 0.86875165, 0.20473367, 0.8676354, 0.48832774, 0.14252533, 0.84816253]])
    main_car = car()
    main_car?.brain.weights = (d_car?.cr.brain.weights)!
    
    let target = SKSpriteNode(imageNamed: "car")
    target.xScale = 0.2
    target.yScale = 0.2
    target.position = CGPoint(x: -100, y: 400)
    self.addChild(target)
    if (train == true){
      for i in 0...30000000{
        main_car?.predict()
        main_car?.update()
        let dx = (main_car?.x)! + 100
        let dy = (main_car?.y)! - 400
        let s = 1 / (sqrt(dx*dx+dy*dy)+1)
        if frames < 1000{
          frames+=1
          score += s
        }else{
          if score > max_score{
            print(i/1000,max_score)
            max_score = score
            main_car!.brain.save_weights(key: "weights")
            print(main_car!.brain.weights)
          }
          frames = 0
          score = 0
          main_car!.reset()
          main_car?.brain.random_weights()
//          main_car?.brain.mutate(alpha: 0.7)
        }
      }
    }
    print("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@")
    
  }
  
  
  override func update(_ currentTime: TimeInterval) {
    d_car?.cr.predict()
    d_car2?.cr.predict()
    d_car3?.cr.predict()
    d_car4?.cr.predict()
    d_car?.update()
    d_car2?.update()
    d_car3?.update()
    d_car4?.update()
    //
    let dx = (d_car?.cr.x)! + 100
    let dy = (d_car?.cr.y)! - 400
    let s = 1 / (sqrt(dx*dx+dy*dy)+1)
    if frames < 1000{
      frames+=1
      score += s
    }else{
      if score > max_score{
        max_score = score
        d_car?.cr.brain.save_weights(key: "weights")
      }
      frames = 0
      score = 0
      d_car?.cr.reset()
    }
//    print(max_score, score,frames)
  }
  
  
  
  
  func touchDown(atPoint pos : CGPoint) {
    
  }
  func touchMoved(toPoint pos : CGPoint) {
    
  }
  func touchUp(atPoint pos : CGPoint) {
    
  }
  override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
    for t in touches { self.touchDown(atPoint: t.location(in: self)) }
  }
  override func touchesMoved(_ touches: Set<UITouch>, with event: UIEvent?) {
    for t in touches { self.touchMoved(toPoint: t.location(in: self)) }
  }
  override func touchesEnded(_ touches: Set<UITouch>, with event: UIEvent?) {
    for t in touches { self.touchUp(atPoint: t.location(in: self)) }
  }
  override func touchesCancelled(_ touches: Set<UITouch>, with event: UIEvent?) {
    for t in touches { self.touchUp(atPoint: t.location(in: self)) }
  }
  
    
  
}
